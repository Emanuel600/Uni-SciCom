    Testando programa feito para calcular raízes de funções arbitrárias:
    
    Será necessário testar 4 métodos:
    1) Bissecção
    2) Falsa Posição
    3) Newton-Raphson
    4) Secante (Modificado)
    
    1) Para o primeiro método, é interessante verificar para intervalos muito curtos, raízes múltiplas
  dentro de um pequeno intervalo e raízes que não "cruzam o eixo 'x'".
    Para raízes múltiplas em um pequeno intervalo, é possível usar uma função seno modificada para ter uma
  frequência muito alta. Aqui temos duas possibilidades: 1) utilisar o espaçamento entre os pontos do gráfico
  para "esconder" uma raiz do usuário em um ponto "pulado" e 2) fazer com que a função própria simplesmente
  possua uma multitude de raízes em uma região, quer esta esteja escondida ou não.
    No caso de uma raiz que não "cruza o eixo 'x'", pode-se utilizar algo como `sin(x)-1` ou x^2. Em ambos
  estes casos a raíz se encontra em um ponto crítico (máximo e mínimo respectivamente) e portanto não possui
  pontos de sinais opostos que podem ser utilizados no método.
  
    2) Para o segundo método, teremos os mesmo testes feitos para o primeiro, o motivo disto é simples: a única
  característica especial do método que pode ser explorada é que o cálcula da raiz utiliza uma divisão. O problema
  em tentar explorar isso, é que só será dividido por zero caso f(xl)=f(xu) e nestes casos teremos que o programa
  vai retornar que não existe raiz no intervalo dado (mesmo resultado da bisecção)
  
    3) Para o terceiro método, os testes anteriores são praticamente triviais. Mas ainda possui algumas fraquezas
  que podemos explorar: Notavelmente, temos funções tal que f'(x)=0 próximo a raíz.
    Dentro deste método também temos que qualquer função com vários locais com f'(x) próximo ou igual a zero podem
  fazer com que a raiz não possa ser determinada, mesmo que longe da raíz própria. Assim temos as duas fraquezas que
  podem ser exploradas.
  
    4) Para o quarto método, temos os mesmo testes feitos no terceiro. Mas temos dentro deste método mais um ponto
  fraco: x=0. Como a perturbação é calculada como `x*dxi`, se tanto 'x' quanto 'dxi' forem pequenos, podemos fazer
  com que a perturbação seja truncada tal que 'p=0'
  
========
    
    Os testes próprios serão arquivados dentro de seus próprios documentos de texto, este serve apenas para o raciocínio
  por trás do motivo da condução dos testes iniciais. Obviamente, além de testes feitos deliberadamente para "quebrar" os
  algoritmos, serão feitos testes em funções completamente normais para ver o algoritmo em ação sem interrupções.
